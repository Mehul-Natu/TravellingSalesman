package info6205.Graph.Problems.TravellingSalesMan.Algorithm;import info6205.Graph.Node;import info6205.Graph.Problems.TravellingSalesMan.GraphImpl.LatLongId;import info6205.Graph.UndirectedEdgeWeighedListGraph;import java.util.List;public class Christofides {    UndirectedEdgeWeighedListGraph<String, LatLongId, Double> graph;    public Christofides(UndirectedEdgeWeighedListGraph<String, LatLongId, Double> graph) {        this.graph = graph;    }    public void runChristofides() {        try {            addEdgesBetweenNodes();            graph.test();            System.out.println("hello hello");            graph.getMSTByPrims();        } catch (Exception e) {            System.out.println("exception while performing christofedies : " + e);        }    }    private void addEdgesBetweenNodes() {        List<Node<String, LatLongId>> nodeList = graph.getNodes();        for (int i = 0; i < nodeList.size() - 1; i++) {            for (int j = i + 1; j < nodeList.size(); j++) {                graph.addEdge(nodeList.get(i), nodeList.get(j),                        getDistanceBetweenNodes(nodeList.get(i), nodeList.get(j)));            }        }    }    private Double getDistanceBetweenNodes(Node<String, LatLongId> node1, Node<String, LatLongId> node2) {        return Math.sqrt(Math.pow(node1.getKey().getValue().getLatitude() - node2.getKey().getValue().getLatitude(), 2)                + Math.pow(node1.getKey().getValue().getLongitude() - node2.getKey().getValue().getLongitude(), 2));    }}